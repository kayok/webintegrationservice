Welcome to your first Connext DDS example!

This C# example was generated for the platform net6,
using the data type SensorData from web.idl.

This example builds one application (webProgram.cs)
which can run a publisher example (webPublisher.cs)
or a subscriber example (webSubscriber.cs).

The available examples are:

  - Default example
  - Advanced example (add -exampleTemplate advanced)

    (The advanced example requires at least .NET Core 3.1, or .NET 5)

To Build this Example (command line)
====================================

From a command prompt, type:

$ dotnet build

To Modify the Data:
===================

To modify the data being sent: edit the webPublisher.cs
file where it says

// Modify the data to be sent here


To Run this Example (command line)
==================================

Run the subscriber on one command prompt:

$ dotnet run -- --sub

Run the publisher on a different command prompt:

$ dotnet run -- --pub

You can pass additional arguments. To see the full list:

$ dotnet run -- -h

For example, to publish 10 data samples on domain 100, run the following:

$ dotnet run -- --pub --domain 100 --sample-count 10

Using Visual Studio Code
========================

Make sure you have installed the Microsoft C# extension for Visual Studio Code.

Simply open this directory with Visual Studio Code to get started. VSC will
automatically load the dependencies and provide IntelliSense.

Using Visual Studio 2019 or Visual Studio for Mac
=================================================

Open web.csproj with Visual Studio to edit, compile, debug,
and run the project.

Troubleshooting
===============

The build can't find Rti.ConnextDds
-----------------------------------

Make sure there is a NuGet.Config file in this directory
It should look like this:

    <configuration>
        <packageSources>
            <add key="local" value="<installdir>/lib/dotnet" />
        </packageSources>
    </configuration>

This file was generated by rtiddsgen and <installdir> should point to your
installation directory for RTI Connext DDS.

You can also configure this package source globally:

    $ dotnet nuget add source /Applications/rti_connext_dds-6.1.2/lib/dotnet -n RTI

I get a "No source for License information" error when I run the application
----------------------------------------------------------------------------

If you get the following error, it may be because you're importing the
Rti.ConnextDds NuGet package from nuget.org, which requires a license.

    RTI Connext DDS No source for License information
    Please contact support@rti.com with any questions or comments

See "The build can't find Rti.ConnextDds" to configure the NuGet package source.

If you prefer to use the nuget.org package, you need to set up the RTI_LICENSE_FILE
environment variable to point to your license file or copy it into this directory.

The build fails trying to download the System.CommandLine package
-----------------------------------------------------------------

This example uses an additional NuGet package from Microsoft to parse
command-line arguments. The build step will automatically download it from
nuget.org if needed. If you prefer not to use System.CommandLine or you can't
connect to nuget.org, you can remove this depencency as follows:

1) run the following command

    $ dotnet remove package System.CommandLine

2) In webProgram.cs remove the code that uses System.CommandLine.
   Replace the body of this method:

    private static Arguments ParseArguments(string[] args)
    {
        ...
    }

   So it looks like this:

    private static Arguments ParseArguments(string[] args)
    {
        return new Arguments { /* set the arguments of your choice here */ };
    }

More information
================

The RTI Connext Getting Started Guide contains practical exercises in C# and
and other programming languages to learn how to effectively use RTI Connext DDS.

See https://community.rti.com/static/documentation/connext-dds/current/doc/manuals/connext_dds_professional/getting_started_guide/index.html
